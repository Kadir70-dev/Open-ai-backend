{"ast":null,"code":"var _jsxFileName = \"/home/kadir/client/src/components/SpeechToText.js\",\n  _s = $RefreshSig$();\n// SpeechToText.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  useEffect(() => {\n    const recognition = new window.webkitSpeechRecognition(); // Using WebkitSpeechRecognition for Chrome\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US'; // Set the language\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n      setTranscript(transcript);\n    };\n    if (isListening) {\n      recognition.start();\n    } else {\n      recognition.stop();\n    }\n    return () => {\n      recognition.stop();\n    };\n  }, [isListening]);\n  const toggleListening = () => {\n    setIsListening(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"wBFUdnzTIp7xb1cAeiXqcsB7V7Q=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SpeechToText","_s","transcript","setTranscript","isListening","setIsListening","recognition","window","webkitSpeechRecognition","continuous","interimResults","lang","onstart","onend","onresult","event","Array","from","results","map","result","join","start","stop","toggleListening","prevState","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kadir/client/src/components/SpeechToText.js"],"sourcesContent":["// SpeechToText.js\nimport React, { useState, useEffect } from 'react';\n\nconst SpeechToText = () => {\n  const [transcript, setTranscript] = useState('');\n  const [isListening, setIsListening] = useState(false);\n\n  useEffect(() => {\n    const recognition = new window.webkitSpeechRecognition(); // Using WebkitSpeechRecognition for Chrome\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US'; // Set the language\n    \n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results)\n        .map(result => result[0].transcript)\n        .join('');\n      setTranscript(transcript);\n    };\n\n    if (isListening) {\n      recognition.start();\n    } else {\n      recognition.stop();\n    }   \n\n    return () => {\n      recognition.stop();\n    };\n  }, [isListening]);\n\n  const toggleListening = () => {\n    setIsListening(prevState => !prevState);\n  };\n\n  return (\n    <div>\n      <button onClick={toggleListening}>\n        {isListening ? 'Stop Listening' : 'Start Listening'}\n      </button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAG,IAAIC,MAAM,CAACC,uBAAuB,CAAC,CAAC,CAAC,CAAC;IAC1DF,WAAW,CAACG,UAAU,GAAG,IAAI;IAC7BH,WAAW,CAACI,cAAc,GAAG,IAAI;IACjCJ,WAAW,CAACK,IAAI,GAAG,OAAO,CAAC,CAAC;;IAE5BL,WAAW,CAACM,OAAO,GAAG,MAAM;MAC1BP,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC;IAEDC,WAAW,CAACO,KAAK,GAAG,MAAM;MACxBR,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAEDC,WAAW,CAACQ,QAAQ,GAAGC,KAAK,IAAI;MAC9B,MAAMb,UAAU,GAAGc,KAAK,CAACC,IAAI,CAACF,KAAK,CAACG,OAAO,CAAC,CACzCC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAClB,UAAU,CAAC,CACnCmB,IAAI,CAAC,EAAE,CAAC;MACXlB,aAAa,CAACD,UAAU,CAAC;IAC3B,CAAC;IAED,IAAIE,WAAW,EAAE;MACfE,WAAW,CAACgB,KAAK,CAAC,CAAC;IACrB,CAAC,MAAM;MACLhB,WAAW,CAACiB,IAAI,CAAC,CAAC;IACpB;IAEA,OAAO,MAAM;MACXjB,WAAW,CAACiB,IAAI,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACnB,WAAW,CAAC,CAAC;EAEjB,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC5BnB,cAAc,CAACoB,SAAS,IAAI,CAACA,SAAS,CAAC;EACzC,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAQ4B,OAAO,EAAEH,eAAgB;MAAAE,QAAA,EAC9BtB,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACThC,OAAA;MAAA2B,QAAA,EAAIxB;IAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV,CAAC;AAAC9B,EAAA,CAhDID,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAkDlB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}