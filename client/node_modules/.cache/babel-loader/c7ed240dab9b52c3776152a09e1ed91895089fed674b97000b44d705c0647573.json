{"ast":null,"code":"var _jsxFileName = \"/home/kadir/client/src/components/SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MdMic, MdPause, MdStop } from 'react-icons/md'; // Import microphone, pause, and stop icons from react-icons library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [transcripts, setTranscripts] = useState(['', '', '', '', '']); // Maintain an array of transcripts for each instance\n  const [isListening, setIsListening] = useState([false, false, false, false, false]); // Maintain an array of listening states\n\n  useEffect(() => {\n    const recognitions = Array.from({\n      length: 5\n    }, () => new window.webkitSpeechRecognition()); // Create an array of recognitions for each instance\n    recognitions.forEach((recognition, index) => {\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n      recognition.onstart = () => {\n        setIsListening(prevStates => [...prevStates.slice(0, index), true, ...prevStates.slice(index + 1)]); // Update the listening state for the specific instance\n      };\n      recognition.onend = () => {\n        setIsListening(prevStates => [...prevStates.slice(0, index), false, ...prevStates.slice(index + 1)]); // Update the listening state for the specific instance\n      };\n      recognition.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n        setTranscripts(prevTranscripts => [...prevTranscripts.slice(0, index), transcript, ...prevTranscripts.slice(index + 1)]); // Update the transcript for the specific instance\n      };\n      return () => {\n        recognition.stop();\n      };\n    });\n  }, []);\n  const toggleListening = index => {\n    setIsListening(prevStates => [...prevStates.slice(0, index), !prevStates[index], ...prevStates.slice(index + 1)]); // Toggle the listening state for the specific instance\n  };\n  const clearTranscript = index => {\n    setTranscripts(prevTranscripts => [...prevTranscripts.slice(0, index), '', ...prevTranscripts.slice(index + 1)]); // Clear the transcript for the specific instance\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: transcripts.map((transcript, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleListening(index),\n        style: {\n          backgroundColor: isListening[index] ? 'red' : 'blue',\n          border: 'none',\n          marginRight: '5px'\n        },\n        children: isListening[index] ? /*#__PURE__*/_jsxDEV(MdPause, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 35\n        }, this) : /*#__PURE__*/_jsxDEV(MdMic, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 59\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => clearTranscript(index),\n        style: {\n          backgroundColor: 'gray',\n          border: 'none',\n          marginRight: '5px'\n        },\n        children: /*#__PURE__*/_jsxDEV(MdStop, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"SyBrfnAwRcyj64otk/YAW2Y4wo0=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","MdMic","MdPause","MdStop","jsxDEV","_jsxDEV","SpeechToText","_s","transcripts","setTranscripts","isListening","setIsListening","recognitions","Array","from","length","window","webkitSpeechRecognition","forEach","recognition","index","continuous","interimResults","lang","onstart","prevStates","slice","onend","onresult","event","transcript","results","map","result","join","prevTranscripts","stop","toggleListening","clearTranscript","children","style","display","alignItems","marginBottom","onClick","backgroundColor","border","marginRight","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kadir/client/src/components/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MdMic, MdPause, MdStop } from 'react-icons/md'; // Import microphone, pause, and stop icons from react-icons library\n\nconst SpeechToText = () => {\n  const [transcripts, setTranscripts] = useState(['', '', '', '', '']); // Maintain an array of transcripts for each instance\n  const [isListening, setIsListening] = useState([false, false, false, false, false]); // Maintain an array of listening states\n\n  useEffect(() => {\n    const recognitions = Array.from({ length: 5 }, () => new window.webkitSpeechRecognition()); // Create an array of recognitions for each instance\n    recognitions.forEach((recognition, index) => {\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n      \n      recognition.onstart = () => {\n        setIsListening(prevStates => [...prevStates.slice(0, index), true, ...prevStates.slice(index + 1)]); // Update the listening state for the specific instance\n      };\n\n      recognition.onend = () => {\n        setIsListening(prevStates => [...prevStates.slice(0, index), false, ...prevStates.slice(index + 1)]); // Update the listening state for the specific instance\n      };\n\n      recognition.onresult = event => {\n        const transcript = Array.from(event.results)\n          .map(result => result[0].transcript)\n          .join('');\n        setTranscripts(prevTranscripts => [...prevTranscripts.slice(0, index), transcript, ...prevTranscripts.slice(index + 1)]); // Update the transcript for the specific instance\n      };\n\n      return () => {\n        recognition.stop();\n      };\n    });\n  }, []);\n\n  const toggleListening = index => {\n    setIsListening(prevStates => [...prevStates.slice(0, index), !prevStates[index], ...prevStates.slice(index + 1)]); // Toggle the listening state for the specific instance\n  };\n\n  const clearTranscript = index => {\n    setTranscripts(prevTranscripts => [...prevTranscripts.slice(0, index), '', ...prevTranscripts.slice(index + 1)]); // Clear the transcript for the specific instance\n  };\n\n  return (\n    <div>\n      {transcripts.map((transcript, index) => (\n        <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n          <button onClick={() => toggleListening(index)} style={{ backgroundColor: isListening[index] ? 'red' : 'blue', border: 'none', marginRight: '5px' }}>\n            {isListening[index] ? <MdPause size={24} /> : <MdMic size={24} />}\n          </button>\n          <button onClick={() => clearTranscript(index)} style={{ backgroundColor: 'gray', border: 'none', marginRight: '5px' }}>\n            <MdStop size={24} />\n          </button>\n          <label>{transcript}</label>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SpeechToText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}